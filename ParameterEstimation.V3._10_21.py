# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FindParam.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QTreeWidgetItem
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
from lifelines import ExponentialFitter
from lifelines import KaplanMeierFitter
from MDAnalysis import MDAnalysis
from MeanTime import *
from FullTrajectory import Gil_Trajectory
from SingleStateMD import SingleState
from LeastSquares import LeastSquares
from Average import WeightedAverage
from FirstReaction import Firstreaction
#from MultiOrigin import Multiorigin
from ModelTranslate import ModelManagement
import matplotlib.pyplot as plt
from scipy.stats import expon
from scipy.integrate import simps
import os
import numpy as np


class Ui_MainWindow(object):
    
    def setupUi(self, MainWindow):
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(987, 499)
        MainWindow.setStyleSheet("background-color: rgb(206, 232, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.MLE = QtWidgets.QPushButton(self.centralwidget)
        self.MLE.setGeometry(QtCore.QRect(718, 110, 251, 31))
        self.MLE.setStyleSheet("background-color: rgb(255, 170, 127);")
        self.MLE.setObjectName("MLE")
        self.LeastSq = QtWidgets.QPushButton(self.centralwidget)
        self.LeastSq.setGeometry(QtCore.QRect(719, 70, 251, 31))
        self.LeastSq.setStyleSheet("background-color: rgb(255, 170, 127);")
        self.LeastSq.setObjectName("LeastSq")
        self.RunMD = QtWidgets.QPushButton(self.centralwidget)
        self.RunMD.setGeometry(QtCore.QRect(20, 90, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.RunMD.setFont(font)
        self.RunMD.setStyleSheet("background-color: rgb(90, 142, 255);")
        self.RunMD.setObjectName("RunMD")
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox.setGeometry(QtCore.QRect(21, 155, 62, 22))
        self.doubleSpinBox.setMinimum(-1.0)
        self.doubleSpinBox.setMaximum(1000.0)
        self.doubleSpinBox.setProperty("value", 0.0)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(87, 155, 81, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("",1)
        self.comboBox.addItem("",1e-3)
        self.comboBox.addItem("",1e-6)
        self.comboBox.addItem("",1e-9)
        self.comboBox.addItem("",1e-12)
        self.comboBox.addItem("",1e-15)
        self.Trajectory = QtWidgets.QPushButton(self.centralwidget)
        self.Trajectory.setGeometry(QtCore.QRect(20, 237, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Trajectory.setFont(font)
        self.Trajectory.setStyleSheet("background-color: rgb(1, 188, 255);")
        self.Trajectory.setObjectName("Trajectory")
        self.FirstReaction = QtWidgets.QPushButton(self.centralwidget)
        self.FirstReaction.setGeometry(QtCore.QRect(20, 271, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.FirstReaction.setFont(font)
        self.FirstReaction.setStyleSheet("background-color:  rgb(1, 188, 255);")
        self.FirstReaction.setObjectName("FirstReaction")
#         self.MultiOrigin = QtWidgets.QPushButton(self.centralwidget)
#         self.MultiOrigin.setGeometry(QtCore.QRect(20, 270, 251, 31))
#         font = QtGui.QFont()
#         font.setPointSize(10)
#         self.MultiOrigin.setFont(font)
#         self.MultiOrigin.setStyleSheet("background-color:  rgb(1, 188, 255);\n"
# "")
#         self.MultiOrigin.setObjectName("MultiOrigin")
        self.InputMD = QtWidgets.QPushButton(self.centralwidget)
        self.InputMD.setGeometry(QtCore.QRect(20, 25, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.InputMD.setFont(font)
        self.InputMD.setStyleSheet("background-color: rgb(90, 142, 255);")
        self.InputMD.setObjectName("InputMD")
        self.Trajectory_2 = QtWidgets.QPushButton(self.centralwidget)
        self.Trajectory_2.setGeometry(QtCore.QRect(20, 203, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Trajectory_2.setFont(font)
        self.Trajectory_2.setStyleSheet("background-color: rgb(1, 188, 255);")
        self.Trajectory_2.setObjectName("Trajectory_2")
        self.Help = QtWidgets.QPushButton(self.centralwidget)
        self.Help.setGeometry(QtCore.QRect(300, 420, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Pristina")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Help.setFont(font)
        self.Help.setStyleSheet("background-color: rgb(15, 223, 255);\n"
"color: rgb(0, 0, 127);\n"
"\n"
"")
        self.Help.setObjectName("Help")
        self.Exit = QtWidgets.QPushButton(self.centralwidget)
        self.Exit.setGeometry(QtCore.QRect(830, 420, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.Exit.setFont(font)
        self.Exit.setStyleSheet("background-color: rgb(255, 62, 62);\n"
"color: rgb(255, 162, 162);\n"
"")
        self.Exit.setObjectName("Exit")
        self.RunMDsingle = QtWidgets.QPushButton(self.centralwidget)
        self.RunMDsingle.setGeometry(QtCore.QRect(20, 121, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.RunMDsingle.setFont(font)
        self.RunMDsingle.setStyleSheet("background-color: rgb(90, 142, 255);")
        self.RunMDsingle.setObjectName("RunMDsingle")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 6, 41, 16))
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(70, 10, 201, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(110, 185, 161, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(21, 185, 91, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(718, 0, 41, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(540, 20, 151, 51))
        self.label_4.setObjectName("label_4")
        self.label_4.setStyleSheet("color: red;\n")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(757, 3, 211, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.mcsteps = QtWidgets.QSpinBox(self.centralwidget)
        self.mcsteps.setGeometry(QtCore.QRect(20, 334, 61, 21))
        self.mcsteps.setMinimum(-1)
        self.mcsteps.setMaximum(9999)
        self.mcsteps.setObjectName("mcsteps")
        self.LabelTimeStep_3 = QtWidgets.QLabel(self.centralwidget)
        self.LabelTimeStep_3.setGeometry(QtCore.QRect(75, 334, 211, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.LabelTimeStep_3.setFont(font)
        self.LabelTimeStep_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.LabelTimeStep_3.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelTimeStep_3.setWordWrap(True)
        self.LabelTimeStep_3.setObjectName("LabelTimeStep_3")
#         self.Model = QtWidgets.QPushButton(self.centralwidget)
#         self.Model.setGeometry(QtCore.QRect(20, 382, 251, 31))
#         font = QtGui.QFont()
#         font.setPointSize(10)
#         self.Model.setFont(font)
#         self.Model.setStyleSheet("background-color: rgb(170, 170, 255);\n"
# "")
#         self.Model.setObjectName("Model")
        # self.Modelcombo = QtWidgets.QComboBox(self.centralwidget)
        # self.Modelcombo.setGeometry(QtCore.QRect(70, 416, 151, 22))
        # self.Modelcombo.setObjectName("Modelcombo")
        # self.Modelcombo.addItem("")
        # self.Modelcombo.addItem("")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(20, 353, 251, 20))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.ShowGraphs = QtWidgets.QPushButton(self.centralwidget)
        self.ShowGraphs.setGeometry(QtCore.QRect(750, 180, 223, 21))
        self.ShowGraphs.setStyleSheet("background-color: rgb(255, 227, 192);")
        self.ShowGraphs.setObjectName("ShowGraphs")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(300, 200, 671, 211))
        self.tableWidget.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectItems)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.WeigtedAv_2 = QtWidgets.QPushButton(self.centralwidget)
        self.WeigtedAv_2.setGeometry(QtCore.QRect(525, 180, 223, 21))
        self.WeigtedAv_2.setStyleSheet("background-color: rgb(255, 227, 192);")
        self.WeigtedAv_2.setObjectName("WeigtedAv_2")
        self.slderlabel = QtWidgets.QLabel(self.centralwidget)
        self.slderlabel.setGeometry(QtCore.QRect(924, 40, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.slderlabel.setFont(font)
        self.slderlabel.setFrameShape(QtWidgets.QFrame.Box)
        self.slderlabel.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.slderlabel.setAlignment(QtCore.Qt.AlignCenter)
        self.slderlabel.setObjectName("slderlabel")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(723, 40, 191, 22))
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setProperty("value", 66)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider.setTickInterval(10)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.treeWidget = QtWidgets.QTreeWidget(self.centralwidget)
        self.treeWidget.setEnabled(False)
        self.treeWidget.setGeometry(QtCore.QRect(300, 200, 671, 211))
        self.treeWidget.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.headerItem().setText(0, "1")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_2.setGeometry(QtCore.QRect(300, 20, 231, 151))
        self.tableWidget_2.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(0)
        self.tableWidget_2.setRowCount(0)
        # self.WeigtedAv_3 = QtWidgets.QPushButton(self.centralwidget)
        # self.WeigtedAv_3.setGeometry(QtCore.QRect(300, 180, 223, 21))
        # self.WeigtedAv_3.setStyleSheet("background-color: rgb(255, 227, 192);")
        # self.WeigtedAv_3.setObjectName("WeigtedAv_3")
        self.LabelTimeStep_4 = QtWidgets.QLabel(self.centralwidget)
        self.LabelTimeStep_4.setGeometry(QtCore.QRect(721, 19, 241, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.LabelTimeStep_4.setFont(font)
        self.LabelTimeStep_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.LabelTimeStep_4.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelTimeStep_4.setWordWrap(True)
        self.LabelTimeStep_4.setObjectName("LabelTimeStep_4")
        self.LabelTimeStep_5 = QtWidgets.QLabel(self.centralwidget)
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(20, 175, 251, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.line_5.raise_()
        
        self.LabelTimeStep_5.setGeometry(QtCore.QRect(170, 120, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.LabelTimeStep_5.setFont(font)
        self.LabelTimeStep_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.LabelTimeStep_5.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelTimeStep_5.setWordWrap(True)
        self.LabelTimeStep_5.setObjectName("LabelTimeStep_5")
        self.LabelTimeStep_6 = QtWidgets.QLabel(self.centralwidget)
        self.LabelTimeStep_6.setGeometry(QtCore.QRect(170, 308, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.LabelTimeStep_6.setFont(font)
        self.LabelTimeStep_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.LabelTimeStep_6.setAlignment(QtCore.Qt.AlignCenter)
        self.LabelTimeStep_6.setWordWrap(True)
        self.LabelTimeStep_6.setObjectName("LabelTimeStep_6")
        # self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        # self.progressBar.setGeometry(QtCore.QRect(20, 420, 251, 21))
        # self.progressBar.setProperty("value", 0)
        # self.progressBar.setAlignment(QtCore.Qt.AlignCenter)
        # self.progressBar.setInvertedAppearance(False)
        # self.progressBar.setTextDirection(QtWidgets.QProgressBar.TopToBottom)
        # self.progressBar.setObjectName("progressBar")
        self.Exit_2 = QtWidgets.QPushButton(self.centralwidget)
        self.Exit_2.setGeometry(QtCore.QRect(670, 420, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.Exit_2.setFont(font)
        self.Exit_2.setStyleSheet("background-color: rgb(255, 227, 192);\n"
"color: rgb(60, 60, 60);\n"
"")
        self.Exit_2.setObjectName("Exit_2")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(87, 308, 81, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("",1)
        self.comboBox_2.addItem("",1e-3)
        self.comboBox_2.addItem("",1e-6)
        self.comboBox_2.addItem("",1e-9)
        self.comboBox_2.addItem("",1e-12)
        self.comboBox_2.addItem("",1e-15)
        self.radbuthist = QtWidgets.QRadioButton(self.centralwidget)
        self.radbuthist.setGeometry(QtCore.QRect(310, 0, 82, 17))
        self.radbuthist.setObjectName("radbuthist")
        self.radbutKm = QtWidgets.QRadioButton(self.centralwidget)
        self.radbutKm.setGeometry(QtCore.QRect(410, 0, 121, 17))
        self.radbutKm.setObjectName("radbutKm")
        self.speiciesInput = QtWidgets.QTextEdit(self.centralwidget)
        self.speiciesInput.setGeometry(QtCore.QRect(20, 60, 251, 26))
        self.speiciesInput.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.speiciesInput.setObjectName("speiciesInput")
        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_2.setGeometry(QtCore.QRect(21, 308, 62, 22))
        self.doubleSpinBox_2.setMinimum(-1.0)
        self.doubleSpinBox_2.setMaximum(100000.0)
        self.doubleSpinBox_2.setProperty("value", 0.0)
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")
        self.speiciesInput.raise_()
        self.LabelTimeStep_4.raise_()
        self.LabelTimeStep_3.raise_()
        self.LabelTimeStep_5.raise_()
        self.LabelTimeStep_6.raise_()
        self.tableWidget_2.raise_()
        self.line_4.raise_()
        self.line_3.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.label_2.raise_()
        self.line_2.raise_()
        self.line.raise_()
        self.MLE.raise_()
        self.LeastSq.raise_()
        self.doubleSpinBox.raise_()
        self.comboBox.raise_()
        self.FirstReaction.raise_()
        #self.progressBar.raise_()
        #self.MultiOrigin.raise_()
        self.InputMD.raise_()
        self.Trajectory_2.raise_()
        self.radbuthist.raise_()
        self.radbutKm.raise_()
        self.Help.raise_()
        self.Exit.raise_()
        self.label.raise_()
        self.mcsteps.raise_()
        # self.Model.raise_()
        #self.Modelcombo.raise_()
        self.ShowGraphs.raise_()
        self.tableWidget.raise_()
        self.WeigtedAv_2.raise_()
        self.slderlabel.raise_()
        self.horizontalSlider.raise_()
        self.RunMD.raise_()
        self.RunMDsingle.raise_()
        self.Trajectory.raise_()
        self.Exit_2.raise_()
        self.comboBox_2.raise_()
        self.doubleSpinBox_2.raise_()
        self.treeWidget.raise_()
        #self.WeigtedAv_3.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 987, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionInput = QtWidgets.QAction(MainWindow)
        self.actionInput.setObjectName("actionInput")
        self.actionSim_Traj = QtWidgets.QAction(MainWindow)
        self.actionSim_Traj.setObjectName("actionSim_Traj")
        self.actionMulti_Traj = QtWidgets.QAction(MainWindow)
        self.actionMulti_Traj.setObjectName("actionMulti_Traj")
        self.speiciesInput.setToolTip( "input species in simulation order")
        self.InputMD.setToolTip('Input a file or files to Analyze')
        self.RunMD.setToolTip('Analyze a single trajectory with multiple events')
        self.RunMDsingle.setToolTip('Analyze multiple trajectories with the same initial conditions')
        self.Trajectory_2.setToolTip('Input a file with the reacting system in Antimony or SBML')
        self.Trajectory.setToolTip('Create and Analyze a single trajectory with multiple events using Tellurium')
        self.FirstReaction.setToolTip('Create and Analyze multiple trajectories with the same initial conditions using Tellurium')
        #self.MultiOrigin.setToolTip('Create a single trajectory and utilizes multiorigin Analysis with Tellurium')
        self.LeastSq.setToolTip('Calulates the reaction rates using Least Squares')
        self.MLE.setToolTip('Not Available Yet!!!')
        self.horizontalSlider.setToolTip('if set to zero it will include all states')
        #self.Model.setToolTip('Convert SBML to Antimony and vise versa')
        self.ShowGraphs.setToolTip('Displays probabilities from current state to neighbouring')
        self.WeigtedAv_2.setToolTip('displays the results for the rates in a list')
        #self.WeigtedAv_3.setToolTip('displays the results from Multi Origin')
        self.doubleSpinBox.setToolTip('set simulation timestep. If timestep is embedded in file set to 0')
        self.doubleSpinBox_2.setToolTip('Input the total length of the simulation')
        self.tableWidget_2.setToolTip('Click on a state to view selected graph')
        
        self.InputMD.clicked.connect(self.OpenMDFile)
        self.RunMD.clicked.connect(self.md_analysis)
        self.RunMDsingle.clicked.connect(self.md_singlestate)

        

        self.Trajectory_2.clicked.connect(self.model_input)
        self.Trajectory.clicked.connect(self.trajectory)
        self.FirstReaction.clicked.connect(self.first_reaction)
        #self.MultiOrigin.clicked.connect(self.multi_origin)

        self.LeastSq.clicked.connect(self.least_squares)
        #self.WeigtedAv.clicked.connect(self.weighted_aver)
        #self.MeanTime.clicked.connect(self.mean_time)
        self.MLE.clicked.connect(self.mle)
        self.horizontalSlider.valueChanged.connect(self.sliderlabel)

        self.Exit.clicked.connect(self.exit)
        #self.Model.clicked.connect(self.model)
        self.Exit_2.clicked.connect(self.filepath)
        self.ShowGraphs.clicked.connect(self.show_probalities)
        self.WeigtedAv_2.clicked.connect(self.Results)
        #self.WeigtedAv_3.clicked.connect(self.MOResults)
        self.tableWidget_2.cellClicked.connect(self.show_graphs)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Parameter Estimation"))
        self.MLE.setText(_translate("MainWindow", "MLE"))
        self.LeastSq.setText(_translate("MainWindow", "Least Squares"))
        self.WeigtedAv_2.setText(_translate("MainWindow", "Show Results"))
        self.RunMD.setText(_translate("MainWindow", "Event Driven Trajectory"))
        self.ShowGraphs.setText(_translate("MainWindow", "Show probabilities from Single Reaction"))
        self.ShowGraphs.setEnabled(False)
        self.doubleSpinBox.setValue(-1)
        self.doubleSpinBox_2.setValue(-1)
        self.doubleSpinBox.setEnabled(False)
        #self.progressBar.setEnabled(False)
        self.doubleSpinBox_2.setEnabled(False)
        self.comboBox.setEnabled(False)
        self.comboBox_2.setEnabled(False)
        self.mcsteps.setValue(-1)
        self.mcsteps.setEnabled(False)
        self.comboBox.setItemText(0, _translate("MainWindow", "seconds"))
        self.comboBox.setItemText(1, _translate("MainWindow", "milliseconds"))
        self.comboBox.setItemText(2, _translate("MainWindow", "microseconds"))
        self.comboBox.setItemText(3, _translate("MainWindow", "nanoseconds"))
        self.comboBox.setItemText(4, _translate("MainWindow", "pikoseconds"))
        self.comboBox.setItemText(5, _translate("MainWindow", "femtoseconds"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "seconds"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "milliseconds"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "microseconds"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "nanoseconds"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "pikoseconds"))
        self.comboBox_2.setItemText(5, _translate("MainWindow", "femtoseconds"))
        self.Trajectory.setText(_translate("MainWindow", "Discrete time intervals Trajectory"))
        self.FirstReaction.setText(_translate("MainWindow", "Single Reaction"))
        #self.MultiOrigin.setText(_translate("MainWindow", "MultiOrigin Trajectory"))
        self.InputMD.setText(_translate("MainWindow", "Input Simulation File(s)"))
        self.Trajectory_2.setText(_translate("MainWindow", "Input  Model to Simulate"))
        self.Exit_2.setText(_translate("MainWindow", "results directory"))
        self.radbuthist.setText(_translate("MainWindow", "Histogram"))
        self.radbutKm.setText(_translate("MainWindow", "Kaplan-Meier Curve"))
        self.radbutKm.setChecked(True)
        self.WeigtedAv_2.setEnabled(False)
        #self.WeigtedAv_3.setEnabled(False)
        self.MLE.setEnabled(False)
        self.LeastSq.setEnabled(False)
        self.RunMD.setEnabled(False)
        self.Exit_2.setEnabled(True)
        self.speiciesInput.setEnabled(False)
        #self.MeanTime.setEnabled(False)
        self.Trajectory.setEnabled(False)
        self.FirstReaction.setEnabled(False)
        #self.MultiOrigin.setEnabled(False)
        self.RunMDsingle.setEnabled(False)
        #self.Model.setEnabled(False)
        #self.InputMD.setEnabled(False)
        self.treeWidget.setEnabled(False)
        self.treeWidget.hide()
        #self.Trajectory_2.setEnabled(False)

        self.Help.setText(_translate("MainWindow", "H E L(L) P !!!"))
        self.Exit.setText(_translate("MainWindow", "E X I T"))
        self.RunMDsingle.setText(_translate("MainWindow", "Single Reaction Analysis"))
        self.label.setText(_translate("MainWindow", "Analysis"))
        self.label_2.setText(_translate("MainWindow", "Create Trajectory"))
        self.label_3.setText(_translate("MainWindow", "Results"))
        self.label_4.setText(_translate("MainWindow", "No output \nnumber of events \nunder threshold"))
        self.label_4.hide()
        self.LabelTimeStep_3.setText(_translate("MainWindow", "Monte Carlo/Multiorigin steps"))
        self.LabelTimeStep_4.setText(_translate("MainWindow", "Adjust threshold for poor histograms"))
        self.LabelTimeStep_5.setText(_translate("MainWindow", "timestep value"))
        self.LabelTimeStep_6.setText(_translate("MainWindow", "simulation length"))
        self.slderlabel.setText('{}'.format(self.horizontalSlider.value()))
        #self.Model.setText(_translate("MainWindow", "Model Output Options"))
        # self.Modelcombo.setItemText(0, _translate("MainWindow", "from SBML to Antimony"))
        # self.Modelcombo.setItemText(1, _translate("MainWindow", "from Antimony to SBML"))
        self.actionInput.setText(_translate("MainWindow", "Input Simulation"))
        self.actionSim_Traj.setText(_translate("MainWindow", "Trajectory Simulation"))
        self.actionMulti_Traj.setText(_translate("MainWindow", "Multi Trajectories"))
        #self.WeigtedAv_3.setText(_translate("MainWindow", "Multiorigin Results"))
        
    
    """ def MOResults(self):
        self.tableWidget.setEnabled(False)
        self.tableWidget.hide()
        self.treeWidget.setEnabled(True)
        self.treeWidget.show()
        self.treeWidget.setHeaderLabels(['from state  -> to new state(s) : prob  -> timelaps : prob'])
        for i in cntrl.MOResults.items():
            item=QTreeWidgetItem([str([int(j) for j in i[0]]).strip('[]()')])
            self.treeWidget.addTopLevelItem(item)
            for ns in i[1].items():
                prob=str(cntrl.MOresults2[i[0]][ns[0]])
                newstate=QTreeWidgetItem([str([int(j) for j in ns[0]]).strip('[]()')+' : '+prob])
                item.addChild(newstate)
                for tl in ns[1].items(): 
                    timelapse=QTreeWidgetItem([str(tl[0]) +' : '+str(tl[1]).strip('[]()')])
                    newstate.addChild(timelapse)
        self.treeWidget.resizeColumnToContents(0)
        self.treeWidget.setAlternatingRowColors(True)
        self.WeigtedAv_3.setEnabled(False) """

    def filepath(self):
        dirname=os.path.dirname(os.path.abspath(__file__))+'\\Results'
        QFileDialog.getOpenFileNames(caption='Results',directory=dirname,filter= '*.*')
    
       
    def Results(self):
        entries={}

        for reaction in cntrl.Results.keys():
            if reaction in cntrl.VizReactions.keys():
                if not reaction in entries.keys():
                    entries[reaction]=cntrl.VizReactions[reaction][0:1]+cntrl.Results[reaction][0]+[cntrl.VizReactions[reaction][-1]]+cntrl.Results[reaction][1]
                else:
                    entries[reaction].append(cntrl.VizReactions[reaction][0:1]+cntrl.Results[reaction][0]+[cntrl.VizReactions[reaction][-1]]+cntrl.Results[reaction][1])
                
        
        self.tableWidget.setRowCount(len(entries))
        self.tableWidget.setColumnCount(6)
        header_labels=['reaction','k', 'CI', 'units','c', 'CI']
        self.tableWidget.setHorizontalHeaderLabels(header_labels)
        for i, row in enumerate(entries.values()):
            for j, col in enumerate(row):
                if not isinstance(col, str) :
                    col='{:.3e}'.format(col)
                item = QtWidgets.QTableWidgetItem(str(col))
                self.tableWidget.setItem(i, j, item)
        self.tableWidget.resizeColumnsToContents()
        #self.WeigtedAv_2.setEnabled(False)
        
        self.tableWidget_2.setRowCount(len(cntrl.lengthsandstate))
        self.tableWidget_2.setColumnCount(2)
        header_labels2=['state','events']
        self.tableWidget_2.setHorizontalHeaderLabels(header_labels2)
        statelist=sorted(cntrl.lengthsandstate,key = lambda x: x[1],reverse=True)
        for i, row in enumerate(statelist):
            for j, col in enumerate(row):
                item2 = QtWidgets.QTableWidgetItem(str(col))
                self.tableWidget_2.setItem(i, j, item2)
        self.tableWidget_2.resizeColumnsToContents()     

    def show_probalities(self):
        entries=[[i[0],'{:.3f}'.format(i[1])] for i in cntrl.probabilities]
        self.tableWidget.setRowCount(len(entries))
        self.tableWidget.setColumnCount(2)
        header_labels=['to state','probability']
        self.tableWidget.setHorizontalHeaderLabels(header_labels)
        for i, row in enumerate(entries):
            for j, col in enumerate(row):
                # if not isinstance(col, str) :
                #     col='{:.3f}'.format(col)
                item = QtWidgets.QTableWidgetItem(str(col))
                self.tableWidget.setItem(i, j, item)
        self.ShowGraphs.setText('initial state{}'.format(cntrl.allstates[0]))
        #self.ShowGraphs.setEnabled(False)
        #self.ShowGraphs.setStyleSheet("background-color: rgb((90, 142, 255);")

    """ def model(self):
        mt=ModelManagement()
        mt.model=cntrl.model
        indx=self.Modelcombo.currentIndex()
        if indx == 0 :
            mt.ExportAntimony()
        elif indx == 1 :
            mt.ExportSBML()
        self.Model.setText('Model Tranlated') """
        
    def mle(self):
        self.MLE.setText('Not Available Yet!!!')
        self.MLE.setEnabled(False)
        self.MLE.setStyleSheet("background-color: rgb(204, 204, 204);")

    def restart(self):
        pass
        #os.system('python "{}"'.format(os.path.abspath(__file__)))
        
    def exit(self):
        sys.exit()
        
    """ def multi_origin(self):
        if self.mcsteps.value() < 0 or self.doubleSpinBox_2.value()<0:
            self.popup()
        else:
            mo=Multiorigin()
            indx=self.comboBox_2.currentIndex()
            mo.endTime=self.doubleSpinBox_2.value()*self.comboBox_2.itemData(indx)
            mo.stepRange=self.mcsteps.value()
            mo.model=cntrl.model
            mo.multi_origin()
            cntrl.MOresults2=mo.results2
            cntrl.MOResults=mo.results
            self.MultiOrigin.setText('Analysis Accomplished')
            self.MultiOrigin.setEnabled(False)
            self.MultiOrigin.setStyleSheet("background-color: rgb(204, 204, 204);")
            self.Trajectory.setEnabled(False)
            self.FirstReaction.setEnabled(False)
            self.WeigtedAv_3.setEnabled(True) """

    def first_reaction(self):
        if self.mcsteps.value() < 0:
            self.popup()
        else:
            mcsteps=self.mcsteps.value()
            model=cntrl.model
            fr=Firstreaction(model,mcsteps)
            fr.first_reaction()
            cntrl.allreactions=fr.allreactions
            cntrl.allstates=fr.allstates
            cntrl.histoarrays=fr.histoarrays
            cntrl.probabilities=fr.probabilities
            self.FirstReaction.setText('Calculation Finished')
            self.FirstReaction.setEnabled(False)
            self.FirstReaction.setStyleSheet("background-color: rgb(204, 204, 204);")
            #self.MultiOrigin.setEnabled(False)
            self.Trajectory.setEnabled(False)
            self.LeastSq.setEnabled(True)
            self.ShowGraphs.setEnabled(True)
            self.doubleSpinBox_2.setEnabled(False)
            self.comboBox_2.setEnabled(False)
            self.mcsteps.setEnabled(False)

    def weighted_aver(self):
        ws=WeightedAverage()
        ws.weightedAv()
        self.WeigtedAv.setText('Calculation Finished')
        self.WeigtedAv.setEnabled(False)
        self.WeigtedAv.setStyleSheet("background-color: rgb(204, 204, 204);")
        pass

    def least_squares(self):
        ls=LeastSquares()
        ls.slider=self.horizontalSlider.value()
        ls.histoarrays=cntrl.histoarrays
        ls.allstates=cntrl.allstates
        ls.singlestate=cntrl.singlestate
        ls.allreactions=cntrl.allreactions
        ls.modelspecies=cntrl.species
        ls.Ksearch()
        cntrl.Results=ls.Results
        cntrl.VizReactions=ls.VizReactions
        cntrl.lengthsandstate=ls.lengthsandstate
        cntrl.binwidth=ls.binwidth
        self.LeastSq.setText('Adjust slider and Recalculate')
        ###############################################self.LeastSq.setEnabled(False)
        #self.LeastSq.setStyleSheet("background-color: rgb(204, 204, 204);")
        self.WeigtedAv_2.setEnabled(True)

    def sliderlabel(self):
        self.slderlabel.setText('{}'.format(self.horizontalSlider.value()))
        #return cntrl.slider=self.horizontalSlider.value()   

    def OpenMDFile(self):
        try:
            cntrl.filepath = QFileDialog.getOpenFileNames(directory=os.path.abspath(__file__))
            if not cntrl.filepath == '':
                self.InputMD.setText('{}'.format(cntrl.filepath))
                self.InputMD.setEnabled(False)
                self.InputMD.setStyleSheet("background-color: rgb(204, 204, 204);")
                self.RunMD.setEnabled(True)
                self.RunMDsingle.setEnabled(True)
                self.Trajectory_2.setEnabled(False)
                self.doubleSpinBox.setEnabled(True)
                self.comboBox.setEnabled(True)
                self.speiciesInput.setEnabled(True)
        except:
            cntrl.filepath = QFileDialog.getOpenFileNames(directory=os.path.abspath(__file__))        
            
    def md_analysis(self):
        # global size
        # size=0
        # totalsize=0
        # self.progressBar.setEnabled(True)
        # for fname in cntrl.filepath[0]:
        #     totalsize += os.path.getsize(fname)
          
        #     # setting value to progress bar
        # self.progressBar.setValue(size/totalsize*100000) 

        if self.doubleSpinBox.value() < 0:
            self.popup()
        else:
            self.RunMD.setText('In Progress')
            cntrl.species=self.speiciesInput.toPlainText().split(',')
            x=MDAnalysis()
            x.directorymain=cntrl.filepath
            indx=self.comboBox.currentIndex()
            x.Timestep=self.doubleSpinBox.value()*self.comboBox.itemData(indx)
            x.main()
            cntrl.allreactions=x.allreactions
            cntrl.allstates=x.allstates
            cntrl.histoarrays=x.histoarrays
            self.RunMD.setText('Analysis Accomplished')
            self.RunMD.setEnabled(False)
            self.RunMD.setStyleSheet("background-color: rgb(204, 204, 204);")
            self.RunMDsingle.setEnabled(False)
            self.LeastSq.setEnabled(True)
            self.doubleSpinBox.setEnabled(False)
            self.comboBox.setEnabled(False)
            self.speiciesInput.setEnabled(False)
            #self.progressBar.hide()

    def md_singlestate(self):
        self.RunMDsingle.setText('Please wait...')
        if self.doubleSpinBox.value() < 0:
            self.popup()
        else:
            s=SingleState()
            s.directorymain=cntrl.filepath
            indx=self.comboBox.currentIndex()
            s.Timestep=self.doubleSpinBox.value()*self.comboBox.itemData(indx)
            s.single_state()
            cntrl.allreactions=s.allreactions
            cntrl.allstates=s.allstates
            cntrl.histoarrays=s.histoarrays
            cntrl.probabilities=s.probabilities
            cntrl.singlestate=s.singstate
            cntrl.species=self.speiciesInput.toPlainText().split(',')
            self.RunMDsingle.setText('Analysis Accomplished')
            self.RunMDsingle.setEnabled(False)
            self.RunMDsingle.setStyleSheet("background-color: rgb(204, 204, 204);")
            self.RunMD.setEnabled(False)
            self.LeastSq.setEnabled(True)
            self.ShowGraphs.setEnabled(True)
            self.doubleSpinBox.setEnabled(False)
            self.comboBox.setEnabled(False)
            self.speiciesInput.setEnabled(False)

    def mean_time(self):
        self.MeanTime.setText('Please wait...') 
        mt=MeanTime() 
        mt.allstates=cntrl.allstates
        mt.histogram()
        self.MeanTime.setText('Calculation Finished')
        self.MeanTime.setEnabled(False)
        self.MeanTime.setStyleSheet("background-color: rgb(204, 204, 204);")
        cntrl.binwidth=mt.binwidth
        
        
        cntrl.lengths=mt.lengths
        cntrl.lengthsandstate=mt.lengthsandstate
        #mt.binwidthvalue=self.lineEdit.text()
        self.LeastSq.setEnabled(True)
        #self.MLE.setEnabled(True)
    
    def show_graphs(self):
        histpath=os.path.dirname(os.path.abspath(__file__))+'\\Results\\histogramms'
        KMpath=os.path.dirname(os.path.abspath(__file__))+'\\Results\\KMcurves'
        col=self.tableWidget_2.currentItem().column()
        if col == 0: 
            row = self.tableWidget_2.currentItem()
            rownum = self.tableWidget_2.currentItem().row()
         
        histoarraylist=[i for i in cntrl.histoarrays if len(i)==3]
        histoarraystr= [str(i[0]) for i in cntrl.histoarrays if len(i)==3]
        if row.text() in histoarraystr:    
            for state in histoarraylist:
                if str(state[0]) == row.text():
                    histoarray=[] ## list of lifetimes
                    for i in state[1]:
                        histoarray.append(i[0])     
                    rate=69

                    if self.radbuthist.isChecked() is True:
                        cntrl.fpath = histpath + '\\'+'histoarrays{}'.format(row.text())+'.{}'.format(rownum) + '.jpg'
                        plt.hist(histoarray,density=True,color="b",bins = np.arange(0, max(histoarray) + cntrl.binwidth, cntrl.binwidth)) ## number of events
                        x = np.linspace(expon.ppf(0.000),expon.ppf(max(histoarray)), 200)
                        plt.plot(x, expon.pdf(x,scale=rate),'r-', lw=1.2, alpha=1)
                        plt.savefig(cntrl.fpath,dpi=300, bbox_inches='tight')
                        plt.close()
                                    
                    if self.radbutKm.isChecked() is True:
                        cntrl.fpath = KMpath + '\\'+'KMGraph{}'.format(row.text())+'.{}'.format(rownum) + '.jpg'
                        exf= ExponentialFitter()
                        kmf = KaplanMeierFitter()
                        #kmf.fit(histoarray)
                        ax = plt.subplot(111)
                        #ax = kmf.fit(histoarray).plot(c='b', ax=ax)
                        ax = exf.fit(histoarray).plot_survival_function(c='b', ax=ax, kind='line')
                        ax = kmf.fit(histoarray).plot(c='g', ax=ax, ci_show=False)
                        x = np.linspace(expon.ppf(0.000),expon.ppf(max(histoarray)), 120)
                        plt.plot(x, np.exp(-(rate)*x),'r--', lw=1.5, alpha=0.6)
                        ax.legend(['survival function','Kaplan Meier','expected','Confid. interv'])
                        plt.savefig(cntrl.fpath, bbox_inches='tight')
                        ax.get_figure().savefig(cntrl.fpath,dpi=300)
                        plt.close()

            self.Datainput = QtWidgets.QWidget()
            self.ui = Popup2()
            self.ui.setupUi(self.Datainput)
            self.Datainput.show()  
        else:
            self.label_4.show()
        pass

    def model_input(self):
        filepath = QFileDialog.getOpenFileName(directory=os.path.abspath(__file__),filter="Text(*.txt);;XML files (*.xml);;ANT(*.ant)")
        cntrl.model=filepath[0]
        self.Trajectory_2.setText('Model Loaded')
        self.Trajectory_2.setEnabled(False)
        self.Trajectory_2.setStyleSheet("background-color: rgb(204, 204, 204);")
        self.InputMD.setEnabled(False)
        self.Trajectory.setEnabled(True)
        #self.MultiOrigin.setEnabled(True)
        self.FirstReaction.setEnabled(True)
        #self.Model.setEnabled(True)
        self.doubleSpinBox_2.setEnabled(True)
        self.comboBox_2.setEnabled(True)
        self.mcsteps.setEnabled(True)

    def trajectory(self):
        if self.doubleSpinBox_2.value() < 0:
            self.popup()
        else:
            indx=self.comboBox_2.currentIndex()
            duration=self.doubleSpinBox_2.value()*self.comboBox_2.itemData(indx)
            tr=Gil_Trajectory()
            tr.model=cntrl.model
            tr.trajectory(duration)
            cntrl.allreactions=tr.allreactions
            cntrl.allstates=tr.allstates
            cntrl.histoarrays=tr.histoarrays
            cntrl.species=tr.modelspecies
            self.Trajectory.setText('Analysis Accomplished')
            self.Trajectory.setEnabled(False)
            self.Trajectory.setStyleSheet("background-color: rgb(204, 204, 204);")
            #self.MultiOrigin.setEnabled(False)
            self.FirstReaction.setEnabled(False)
            self.LeastSq.setEnabled(True)
            self.doubleSpinBox_2.setEnabled(False)
            self.comboBox_2.setEnabled(False)
            self.mcsteps.setEnabled(False)
    
    def popup(self):
        msg=QMessageBox()
        msg.setWindowTitle('Error')
        msg.setText("timestep is not defined")
        msg.setIcon(QMessageBox.Critical)
        msg.setStandardButtons(QMessageBox.Cancel) # more options exist
        msg.setInformativeText('Please enter a Valid value as timestep')
        msg.exec_()    

class Popup2(object):
    def setupUi(self, Popup):
        Popup.setObjectName("Popup")
        Popup.resize(655, 488)
        self.label = QtWidgets.QLabel(Popup)
        self.label.setGeometry(QtCore.QRect(10, 10, 655, 488))
        self.label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label.setObjectName("label")
        self.label.setScaledContents(True)
        self.pixmap = QPixmap(cntrl.fpath)
        self.label.setPixmap(self.pixmap)
        self.closeButton = QtWidgets.QPushButton(Popup)
        self.closeButton.setGeometry(QtCore.QRect(10, 490, 640, 21))
        self.closeButton.setObjectName("pushButton")
        self.closeButton.clicked.connect(Popup.close)
        self.retranslateUi(Popup)
        QtCore.QMetaObject.connectSlotsByName(Popup)

    def retranslateUi(self, Popup):
        _translate = QtCore.QCoreApplication.translate
        Popup.setWindowTitle(_translate("Popup", "compare distributions"))
        self.closeButton.setText(_translate("Popup", "close image"))

class Controller():
    def __init__(self):
        self.filepath=''
        self.histoarray=[0]
        self.model=''
        self.species=[]
        self.mcsteps=''
        self.lengths=''
        self.lengthsandstate=''
        self.allreactions=[]
        self.allstates=[]
        self.histoarrays=[]
        self.Results=''
        self.VizReactions={}
        self.probabilities=''
        self.singlestate=0
        self.MOResults=''
        self.MOresults2=''
        self.fig=''
        self.binwidth=''
        self.fpath=''
        

    def main(self):
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())

   
        
if __name__ == "__main__":
    import sys
    cntrl=Controller()
    cntrl.main()
    
    